name: Deploy tg-proxy to SAP BTP

on:
  workflow_dispatch:

env:
  BTP_APP_NAME: my-tg-proxy-docker
  DOCKER_IMAGE: songnidedubai/tg-proxy

jobs:
  deploy-to-btp:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y wget ca-certificates

      - name: Install CF CLI (official package)
        run: |
          set -eux
          wget -q -O cf-cli.deb "https://packages.cloudfoundry.org/stable?release=debian64&source=github"
          sudo dpkg -i cf-cli.deb || (sudo apt-get install -f -y && sudo dpkg -i cf-cli.deb)
          cf --version

      - name: Show selected env (sanitized)
        run: |
          echo "BTP_APP_NAME=${{ env.BTP_APP_NAME }}"
          echo "DOCKER_IMAGE=${{ env.DOCKER_IMAGE }}"
          echo "BTP_API=${{ secrets.BTP_API }}"
          echo "BTP_ORG=${{ secrets.BTP_ORG }}"
          echo "BTP_SPACE=${{ secrets.BTP_SPACE }}"

      - name: CF login and target (verbose)
        env:
          CF_TRACE: true
        run: |
          set -eux
          # 尝试常规 api 调用；有些 endpoint 需要 --skip-ssl-validation，根据实际情况打开或删除该 flag
          cf api "${{ secrets.BTP_API }}" --skip-ssl-validation || cf api "${{ secrets.BTP_API }}"
          cf auth "${{ secrets.BTP_USER }}" "${{ secrets.BTP_PASS }}"
          cf target -o "${{ secrets.BTP_ORG }}" -s "${{ secrets.BTP_SPACE }}"

      - name: Push Docker Image (no start) — supports private Docker Hub optionally
        run: |
          set -eux
          # 如果仓库是私有镜像，请在仓库 Secrets 中设置 DOCKERHUB_USER & DOCKERHUB_PASS
          if [ -n "${{ secrets.DOCKERHUB_USER }}" ]; then
            cf push "${{ env.BTP_APP_NAME }}" \
              --docker-image "${{ env.DOCKER_IMAGE }}" \
              --docker-username "${{ secrets.DOCKERHUB_USER }}" \
              --docker-password "${{ secrets.DOCKERHUB_PASS }}" \
              --random-route \
              -m 256M \
              --no-start
          else
            cf push "${{ env.BTP_APP_NAME }}" \
              --docker-image "${{ env.DOCKER_IMAGE }}" \
              --random-route \
              -m 256M \
              --no-start
          fi

      - name: Set Environment Variables
        run: |
          set -eux
          cf set-env "${{ env.BTP_APP_NAME }}" BOT_TOKEN "${{ secrets.TG_BOT_TOKEN }}"
          cf set-env "${{ env.BTP_APP_NAME }}" CHAT_ID "${{ secrets.TG_CHAT_ID }}"
          cf set-env "${{ env.BTP_APP_NAME }}" PROXY_SECRET "${{ secrets.TG_PROXY_SECRET }}"

      - name: Start Application and gather diagnostics if failed
        run: |
          set -eux
          # 如果 start 失败，仍继续执行并在最后返回非0（通过手动 exit 1）
          if cf start "${{ env.BTP_APP_NAME }}"; then
            echo "App started successfully"
            cf app "${{ env.BTP_APP_NAME }}" || true
          else
            echo "cf start failed — collecting diagnostics"
            echo "=== CF APP ==="
            cf app "${{ env.BTP_APP_NAME }}" || true
            echo "=== CF RECENT LOGS ==="
            cf logs "${{ env.BTP_APP_NAME }}" --recent || true
            echo "=== CF EVENTS ==="
            cf events "${{ env.BTP_APP_NAME }}" || true
            # 返回非0，标记 workflow 失败（这样你能在 Actions 里看到完整输出）
            exit 1
          fi

      - name: List apps (final check)
        run: |
          cf apps || true
